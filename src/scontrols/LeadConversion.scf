<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--
Lead Conversion Utility for Salesforce.com
Copyright (C) 2005 Steve Andersen, steve@onenw.org, ONE/Northwest, 1402 Third Ave, Suite 1000, Seattle, WA, 98101

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
---------------------------------------------------------------------
Description:
This scontrol handles lead conversion and can also be a part of a process for importing online payments generated
at an outside service. The steps in the overall process are as follows:
 * Importing Online Payments to Lead Objects
   * Comma Separated Values (CSV) file of payments is dowloaded from online donation service (PayPal, DonateNow, AuctionPay, etc.)
   * CSV is imported to Leads via Lead Import process at salesforce.com
 * Converting Leads to Contacts, Accounts, and Opportunities
   * Leads Conversion tab (this scontrol) lists all open Leads, showing payment info if exists
   * User attempts to match each Lead to an existing Contact with same email address or same last name
   * If match is found, Lead is merged with Contact, and a closed Opportunity is created if necessary
   * If user found no match, Lead is converted to new Contact and a closed Opportunity is created for that converted Contact.
   * User is presented with links to Contact and Opportunity
   
OptionalCustomizations:
 * Leads
   * Custom fields on Lead to capture online payment information. In this example "Donation_Close_Date__c" and "Donation_Amount__c" for close date and amount of Donation
 * This S-Control (search for CONSTANT to find where code changes are necessary)
   * Install this code, making necessary changes to constants and adding any additional fields you want
   * Important: Enter the values for open and closed leads into the code below

Because of the manual import of online donations as Leads, this scontrol can work with online donations from any service that allows export to CSV.
Last Modified: 3/29/2006-->
<html>
	<head>
		<title>Lead Conversion - Powered by the Sforce AJAX Toolkit (Beta 3.3)</title>
		
		<script src="https://www.salesforce.com/services/lib/ajax/beta3.3/sforceclient.js" type="text/javascript"></script>
		<link  href="/dCSS/Theme2/default/common.css" type="text/css" media="handheld,print,projection,screen,tty,tv" rel="stylesheet" ><link  href="/dCSS/Theme2/default/custom.css" type="text/css" media="handheld,print,projection,screen,tty,tv" rel="stylesheet" ><link  href="/css/assistive.css" type="text/css" media="aural,braille,embossed" rel="stylesheet" >

		<style>
			th,td{
			font-size: 12px !important;
			}

		</style>
		<script type="text/javascript">
			/****************************************************************
			* Main function called on page load
			*****************************************************************/			
			function initPage() {	
				
				//Proof of session when used in salesforce.com interface
				 //Initialize the connection to salesforce.com by setting the sessionid and the
                //soap endpoint in the init call
                sforceClient.setLoginUrl("https://www.salesforce.com/services/Soap/u/7.0");
                sforceClient.registerInitCallback(startUp);
                sforceClient.init("{!API_Session_ID}", "{!API_Partner_Server_URL_70}", false);
				//Get the current contact id from the session
            }
			
			/****************************************************************
			* Main function called on page load
			*****************************************************************/
			function startUp() {	
				
                var UnconvertedLeadList = new Array();
				//check to see if the two custom fields have been added to the lead object
				if (check_field("lead", "Donation_Close_Date__c") && check_field("lead", "Donation_Amount__c")) {
					//set flag for creating opportunities if the fields have been added
					var OppCreationEnabled = true;
					/*
					CONSTANT - SET THIS VALUE IF YOU WANT TO LIMIT THE LEADS THAT ARE AVAILABLE TO THIS INTERFACE. DEFAULT
					IS TO VIEW ALL LEADS THAT ARE NOT CONVERTED.
					*/ 
					var UnconvertedLeadStatus = "";
					//Go get the list of Leads, using the selected LeadStatus if identified
					if (UnconvertedLeadStatus!=""){
						var UnconvertedLeadList = sforceClient.Query("Select Id, FirstName, LastName, Company, Email, Donation_Close_Date__c, Donation_Amount__c from Lead where LeadStatus = '" + UnconvertedLeadStatus + "'");
					} else {
						var UnconvertedLeadList = sforceClient.Query("Select Id, FirstName, LastName, Company, Email, Donation_Close_Date__c, Donation_Amount__c from Lead where IsConverted = false");
				 	}
				} else {
					//set flag for creating opportunities to false if they haven't created the fields
				    var OppCreationEnabled = false;
				    //Go get the list of Leads
				    var UnconvertedLeadList = sforceClient.Query("Select Id, FirstName, LastName, Company, Email from Lead where IsConverted = false");
				}
				
				var LeadListHTML = "";
				//Check to see if any lead records were found
				if (UnconvertedLeadList.size>0) {
					UnconvertedLeadListArray = UnconvertedLeadList.records;
					//Create the top of the table to hold the leads
					LeadListHTML += "<table class='outer' width='100%' border='0' cellspacing='0' cellpadding='0'><tr><td class='oRight'>";
					LeadListHTML += "<!-- Begin RelatedListElement -->";
					LeadListHTML += "<div class='bRelatedList'>";
					LeadListHTML += "<!-- Begin ListElement -->";
					LeadListHTML += "<!-- motif: Lead -->";
					LeadListHTML += "<div class='bNext'><div class='withFilter'><div class='clearingBox'></div></div></div>";
					LeadListHTML += "<!-- WrappingClass -->";
					LeadListHTML += "<div class='hotListElement'><div class='bPageBlock secondaryPalette'><div class='pbHeader'><form  action='/00Q/o' id='hotlist' name='hotlist' method='GET' ><TABLE  cellpadding='0' cellspacing='0' border='0'><TR><TD class='pbTitle'><img src='/s.gif' alt='' title='' width=1 height=1 class='minWidth'><h3>Leads to be Converted</h3></TD><TD></TD><TD></TD></TR>";
					LeadListHTML += "</TABLE></form></div><div class='pbBody'><table class='list' border='0' cellspacing='0' cellpadding='0'>";
					LeadListHTML += "<tr class='headerRow'><th scope='col' class=''>Name</th><th scope='col' class=''>Contact</th><th scope='col' class=''>Account</th><th scope='col' class=''>Convert</th><th scope='col' class=''>Email</th>";
					//if opportunity creation is enabled, display the opportunity fields in the table top
					if (OppCreationEnabled) {
					   LeadListHTML += "<th scope='col' class=''>Donation Date</th><th scope='col' class=''>Donation Amount</th>";
					}
					LeadListHTML += "</tr>";
					
					//Loop through the results and create each row of the table
					for(LeadRow=0;LeadRow<UnconvertedLeadListArray.length;LeadRow++) {
						ThisLead = UnconvertedLeadListArray[LeadRow];
						//Set even and odd parameters for row display
						var oddRow = LeadRow % 2;
						if (oddRow) {
							var AlternatingRowClass = "odd";
						} else {
							var AlternatingRowClass = "even";
						}
						//set first and last parameters for row display
						if (LeadRow == 0) {
							FirstLastRowClass = "first";
						} else if(LeadRow == UnconvertedLeadListArray.length-1) {
							FirstLastRowClass = "last";
						} else {
							FirstLastRowClass = "";
						}
						var LeadId = ThisLead.get("id");
						var LeadFirstName = encode(ThisLead.get("firstname"));
						var LeadLastName = encode(ThisLead.get("lastname"));
						var LeadEmail = ThisLead.get("email");
						var LeadAccount = encode(ThisLead.get("company"));
						
						//Create a table row for each record
						LeadListHTML += "<!-- ListRow -->";						
						LeadListHTML += "<tr class=' dataRow " + AlternatingRowClass + " " + FirstLastRowClass + "'><th scope='row' class='dataCell' id='Row" + LeadId + "Lead'><a href='/" + LeadId + "' target='_lead'>" + decode(LeadFirstName) + " " + decode(LeadLastName) + "</a></th><td id='Row" + LeadId + "Contact' class=' dataCell  '><a href='#' onclick=\"selectMergeCandidates('" + LeadId + "','" + LeadEmail + "','" + LeadFirstName + "','" + LeadLastName + "','" + LeadAccount + "');\">Find Matches</a></td><td id='Row" + LeadId + "Account' class=' dataCell  '>" + decode(LeadAccount) + "</td><td id='Row" + LeadId + "ConvertButton' class=' dataCell  '></td><td class=' dataCell  '>" + LeadEmail + "</td>";
						//show the opportunity fields if enabled
						if (OppCreationEnabled) {
							//If the date doesn't exist, show nothing, otherwise format it nicely
				            if (ThisLead.get("Donation_Close_Date__c")!=null) {
				                var LeadDonationDate = Sforce.Util.FormatDate(ThisLead.get("Donation_Close_Date__c"),"M/d/yyyy");
				            } else {
				                var LeadDonationDate = "";
				            }
				            //If the amount doesn't exist, show nothing, otherwise format it nicely
				            if(ThisLead.get("Donation_Amount__c")!=null) {
				                var LeadDonationAmount = "$ " + ThisLead.get("Donation_Amount__c");
				            } else {
				                var LeadDonationAmount = "";
				            }
				            //write the cells
				            LeadListHTML += "<td class='dataCell' id='Row" + LeadId + "oppdate'>" + LeadDonationDate +  "</td><td class='dataCell' id='Row" + LeadId + "oppamount'>" +  LeadDonationAmount + "</td>";
				        }
				        LeadListHTML += "</tr>";
					}
					//create end of table
					LeadListHTML += "</table>";
					LeadListHTML += "</div><div class='pbFooter secondaryPalette'><div class='bg'></div></div></div></div><div class='listElementBottomNav'></div>";
					LeadListHTML += "<!-- End ListElement -->";
					LeadListHTML += "</div>";
					LeadListHTML += "<!-- End RelatedListElement -->";
					LeadListHTML += "</td></tr></table>"
					
				} else {
					//if no records found
					LeadListHTML = "<h1>No pending Leads found.</h1>";
				}
				//Put the table in the div that will hold it
				document.getElementById("divLeadListHTML").innerHTML = LeadListHTML;				
			}
			/****************************************************************
			* function to search for possible duplicate Contacts and create a select list that can be used in the conversion process
			*****************************************************************/
			function selectMergeCandidates(LeadId,LeadEmail,LeadFirstName,LeadLastName,LeadAccount) {
				//Querying salesforce for any contacts that have the same email address.
				var MergeCandidatesByEmail = sforceClient.Query("Select Id, FirstName, LastName, AccountId from Contact where Email='"+ LeadEmail +"'");
				//unique name for select box
				var MergeSelectName = "mergecandidateselect" + LeadId;
				//start the select
				linkHTML = "<select name='" + MergeSelectName + "' id='" + MergeSelectName + "' onchange=\"SelectOnChange(this,'" + LeadId + "','" + LeadAccount + "');\"><option value=''>Create new: " + decode(LeadFirstName) + " " + decode(LeadLastName) + "</option>";
				//add any matched by email address to the list
				if(MergeCandidatesByEmail.size>0) {
					for (var row=0;row<MergeCandidatesByEmail.size;row++) {
						MergeCandidatesByEmailArray = MergeCandidatesByEmail.records;
						ThisMergeCandidate = MergeCandidatesByEmailArray[row];
						linkHTML += "<option value='" + ThisMergeCandidate.get("id") + "'>Merge with: " + ThisMergeCandidate.get("firstname") + " " + ThisMergeCandidate.get("lastname") + "</option>";
					}
				}
				//no match by email, search by last name and add to list
				if(MergeCandidatesByEmail.size==0) {
					var MergeCandidatesByLastName = sforceClient.Query("Select Id, FirstName, LastName, AccountId from Contact where LastName='"+ decode(LeadLastName) +"'");
					if(MergeCandidatesByLastName.size>0) {
						//add each Contact matched by last name to the select statement
						for (var row=0;row<MergeCandidatesByLastName.size;row++) {
							MergeCandidatesByLastNameArray = MergeCandidatesByLastName.records;
							ThisMergeCandidate = MergeCandidatesByLastNameArray[row];
							linkHTML += "<option value='" + ThisMergeCandidate.get("id") + "'>Merge with: " + ThisMergeCandidate.get("firstname") + " " + ThisMergeCandidate.get("lastname") + "</option>";
						}
					}
				}				
				//end the select
				linkHTML += "</select>";
				//write the HTML to the table cell Div
				document.getElementById("Row" + LeadId + "Contact").innerHTML = linkHTML;
				
				//create the Account drop down box
				//Querying salesforce for any contacts that have the same email address.
				var AccountMergeCandidates = sforceClient.Query("Select Id, Name from Account where Name='"+ decode(LeadAccount) +"'");

				var AccountMergeSelectName = "accountmergecandidateselect" + LeadId;
				//start the select, naming it uniquely
				AccountSelectHTML = "<select name='" + AccountMergeSelectName + "' id='" + AccountMergeSelectName + "'><option value=''>Create new: " + decode(LeadAccount) + "</option>";
				//add any matched by email address to the list
				if(AccountMergeCandidates.size>0) {
					for (var row=0;row<AccountMergeCandidates.size;row++) {
						AccountMergeCandidatesArray = AccountMergeCandidates.records;
						ThisAccountMergeCandidate = AccountMergeCandidatesArray[row];
						AccountSelectHTML += "<option value='" + ThisAccountMergeCandidate.get("id") + "'>Merge with: " + ThisAccountMergeCandidate.get("Name") + "</option>";
					}
				}
				//end the select
				AccountSelectHTML += "</select>";
				//put the select box into the table cell
				document.getElementById("Row" + LeadId + "Account").innerHTML = AccountSelectHTML;
				//Create the submit button with a link to createLeadToConvert function
				ConvertButtonHTML = "<div id='SubmitDiv" + LeadId + "'><input name='Submit" + LeadId + "' type='submit' value='Convert' onclick=\"createLeadToConvert('" + LeadId + "');\"></input></div>";
				//put the submit button in the table cell
				document.getElementById("Row" + LeadId + "ConvertButton").innerHTML = ConvertButtonHTML; 
			}
			
			/****************************************************************
			* function to search for possible duplicates and create a select list that can be used in the conversion process
			*****************************************************************/
			function selectAccountMergeCandidates(ContactId,LeadId,LeadAccount) {
				var mergecandidateselectid = "mergecandidateselect" + LeadId;
				//get the selected Contact Id from the Contact drop down
				ContactId=document.getElementById(mergecandidateselectid).options[document.getElementById(mergecandidateselectid).selectedIndex].value;
				//if we're merging to a Contact
				if(ContactId!="") {
					//Get the AccoutId for the selected Contact.
					var ThisAccountMergeCandidate = sforceClient.Retrieve("AccountId","Contact",ContactId)[0];
					
					var AccountMergeSelectName = "accountmergecandidateselect" + LeadId;
					//start the select, naming it uniquely
					AccountLinkHTML = "<select name='" + AccountMergeSelectName + "' id='" + AccountMergeSelectName + "'>";
		
					//get the account name for the chose Account.
					ThisChosenAccount = sforceClient.Retrieve("Name","Account",ThisAccountMergeCandidate.get("AccountId"))[0];
					//create the option value		
				    AccountLinkHTML += "<option value='" + ThisAccountMergeCandidate.get("AccountId") + "'>Merge with: " + ThisChosenAccount.get("Name") + "</option>";
		
					//end the select
					AccountLinkHTML += "</select>";
					//write the HTML to the table cell Div
					document.getElementById("Row" + LeadId + "Account").innerHTML = AccountLinkHTML;
				} else {
					
					//Querying salesforce for any contacts that have the same email address.
					var AccountMergeCandidates = sforceClient.Query("Select Id, Name from Account where Name='"+ decode(LeadAccount) +"'");
	
					var AccountMergeSelectName = "accountmergecandidateselect" + LeadId;
					//start the select
					AccountLinkHTML = "<select name='" + AccountMergeSelectName + "' id='" + AccountMergeSelectName + "'>";
					//add any matched by email address to the list
					if(AccountMergeCandidates.size>0) {
						for (var row=0;row<AccountMergeCandidates.size;row++) {
							AccountMergeCandidatesArray = AccountMergeCandidates.records;
							ThisAccountMergeCandidate = AccountMergeCandidatesArray[row];
							AccountLinkHTML += "<option value='" + ThisAccountMergeCandidate.get("id") + "'>Merge with: " + ThisAccountMergeCandidate.get("Name") + "</option>";
						}
					}		
					//end the select
					AccountLinkHTML += "<option value=''>Create new Account: " + decode(LeadAccount) + "</option></select>";
					//write the HTML to the table cell Div
					document.getElementById("Row" + LeadId + "Account").innerHTML = AccountLinkHTML;
				}
				//Create the submit button with a link to createLeadToConvert function
				ConvertButtonHTML = "<div id='SubmitDiv" + LeadId + "'><input name='Submit" + LeadId + "' type='submit' value='Convert' onclick=\"createLeadToConvert('" + LeadId + "');\"></input></div>";
				document.getElementById("Row" + LeadId + "ConvertButton").innerHTML = ConvertButtonHTML; 
			}

			/****************************************************************
			* function to look for Account when Contact has been selected
			*****************************************************************/
			function SelectOnChange(select,LeadId,LeadAccount){
				selectAccountMergeCandidates(select.options[select.selectedIndex].value,LeadId,LeadAccount);
			}
			
			/****************************************************************
			* function to convert lead
			*****************************************************************/
			function createLeadToConvert(LeadId) {	
				/*
				CONSTANT - MAKE SURE THIS STATUS MATCHES THE STATUS YOU WANT TO USE FOR CONVERTED LEADS
				OTHERWISE, A CONVERTED STATUS WILL BE CHOSEN FOR YOU
				*/
				var ConvertedLeadStatus = "";
				if (ConvertedLeadStatus==""){
				    //Querying salesforce for any contacts that have the same email address.
				    var LeadStatus = sforceClient.Query("Select MasterLabel from LeadStatus where IsConverted="+ true);

				    //add any matched by email address to the list
				    if(LeadStatus.size>0) {				    
				        LeadStatusArray = LeadStatus.records;
				        ThisLeadStatus = LeadStatusArray[0];
						//set the status to the first converted one found
				        ConvertedLeadStatus = ThisLeadStatus.get("MasterLabel");
				    }
				}
				var OppCreationEnabled = false;
				//if the opportunity fields exist on the lead object, opportunities are enabled
                if (check_field("lead", "Donation_Close_Date__c") && check_field("Lead", "Donation_Amount__c")) {
				    OppCreationEnabled = true;
				}
				//if opp creation is enabled
				if (OppCreationEnabled) {					
				    //create the field list
				    var LeadFields = "FirstName, LastName, Company, Donation_Close_Date__c, Donation_Amount__c";
                } else {
                    //create the field list
				    var LeadFields = "FirstName, LastName, Company";
                }
                //retrieve the lead
                var ThisLead = sforceClient.Retrieve(LeadFields,"Lead",LeadId)[0];
				var CurrentLeadCompany = ThisLead.get("Company");
				var CurrentLeadDonationAmount ="";
				var CurrentLeadDonationCloseDate ="";
				//if opportunity creation is turned on, get those values
				if (OppCreationEnabled) {
					CurrentLeadDonationAmount = ThisLead.get("Donation_Amount__c");
         			if (ThisLead.get("Donation_Close_Date__c")!=null) {
         				CurrentLeadDonationCloseDate = ThisLead.get("Donation_Close_Date__c");
             		}
                }					
				//Get the selected Contact Id from drop down.
				var ContactId = document.getElementById("mergecandidateselect" + LeadId).options[document.getElementById("mergecandidateselect" + LeadId).selectedIndex].value;
				
				//Get the selected Account ID from drop down
				var AccountId = document.getElementById("accountmergecandidateselect" + LeadId).options[document.getElementById("accountmergecandidateselect" + LeadId).selectedIndex].value;
			
				//create a Leadconverts object
				var LeadToConvert = new Sforce.LeadConvert;
				//set the converted status for the lead
				LeadToConvert.convertedStatus = ConvertedLeadStatus;
				//set the flag for not creating Opportunity to false
				LeadToConvert.doNotCreateOpportunity = true;
				//the Lead Id we want to convert
				LeadToConvert.leadId = LeadId;
				//if we're merging to a contact, use the first and last name, otherwise, use the lead's name data
				if(ContactId!="") {
					LeadToConvert.contactId = ContactId;
					var ThisCurrentContact = sforceClient.Retrieve("FirstName, LastName","Contact",ContactId)[0];
					firstname = ThisCurrentContact.get("FirstName");
					lastname = ThisCurrentContact.get("LastName");
				} else {
					firstname = ThisLead.get("FirstName");
					lastname = ThisLead.get("LastName");
				}					
				//If we've picked an account to merge to, use that id
				if(AccountId!=""){
					LeadToConvert.accountId = AccountId;
				} else {
					//If we haven't picked an account, go look for an Id matching Company Name
					var AccountMergeCandidates = sforceClient.Query("Select Id, Name from Account where Name='"+ CurrentLeadCompany +"'");
				
					//if we matched, grab the first one's id
					if(AccountMergeCandidates.size>0) {						
						AccountMergeCandidatesArray = AccountMergeCandidates.records;
						ThisMergeAccount = AccountMergeCandidatesArray[0];
						LeadToConvert.accountId = ThisMergeAccount.get("id");
					}
					//if no match was found, create a new account (handled automatically by the Lead Convert process)					
				}				
				//create the opportunity if there is an amount
				if (OppCreationEnabled && CurrentLeadDonationAmount!="" && CurrentLeadDonationAmount!=null) {
					/*
					Here are a set of possible constants to use when creating your opportunities.
					For these to work, make sure you call them 
					
					*/
				    //CONSTANT - optional record type for the created opportunities
				    //var OpportunityRecordType = '012700000000vomAAU';
				    //CONSTANT - Suffix to tack on the name of a created Opportunity
				    var OpportunityNameSuffix = 'Donation';
				    //CONSTANT - OpportunityContactRole role name - pick a default type
				    //var OpportunityType = 'Cash/Check';
				    //CONSTANT - OpportunityContactRole role name - role for the Contact on the Opportunity
				    var OpportunityContactRoleName = "";
				    //Opportunity Fund - custom field
				    //var Fund = 'General';

		            //if the date is null, use today
		            if (CurrentLeadDonationCloseDate!="") {
		                var LeadDonationDate = Sforce.Util.FormatDate(CurrentLeadDonationCloseDate,"M/d/yyyy");
		            } else {
		                var LeadDonationDate = new Date();
		                LeadDonationDate = Sforce.Util.FormatDate(LeadDonationDate,"M/d/yyyy");
		            }
		            //tell lead conversion to create an opp
		            LeadToConvert.doNotCreateOpportunity = false;
		            //give the new Opportunity a name						
		            LeadToConvert.opportunityName = firstname + " " + lastname + " " + OpportunityNameSuffix + " - " + LeadDonationDate;
				
				}
				//Convert the lead
				var LeadConversionResponse = sforceClient.ConvertLead(LeadToConvert);
				//handle success or failure		
				if (LeadConversionResponse[0].success == true) {
					//Get the first object from the array of objects
					ThisConversionResponse = LeadConversionResponse[0];	
					//create the link for the created/merged Contact
					linkHTML = "<a href='/" + ThisConversionResponse.contactId + "' target=_'new_contact'>" + firstname + " " + lastname + "</a>";
			
					var ThisAccount = sforceClient.Retrieve("Name","Account",ThisConversionResponse.accountId)[0];
					accountlinkHTML ="<a href='/" + ThisConversionResponse.accountId + "' target=_'new_contact'>" + ThisAccount.get("Name") + "</a>";
					//if we created an opportunity, put in the link
					if (OppCreationEnabled && CurrentLeadDonationAmount!="") {
						//create the link for the Opportunity
						oppdatelinkHTML ="<a href='/" + ThisConversionResponse.opportunityId + "' target=_'new_contact'>" + LeadDonationDate + "</a>";
						oppamountlinkHTML ="<a href='/" + ThisConversionResponse.opportunityId + "' target=_'new_contact'>$ " + CurrentLeadDonationAmount + "</a>";
					}
					//display a link to the contact
					document.getElementById("Row" + LeadToConvert.leadId + "Contact").innerHTML = linkHTML;
					//kill the link to the lead as it's now converted
					document.getElementById("Row" + LeadToConvert.leadId + "Lead").innerHTML = "Converted";
					//display a link to the Account
					document.getElementById("Row" + LeadToConvert.leadId + "Account").innerHTML = accountlinkHTML;
					//kill the convert button
					document.getElementById("Row" + LeadToConvert.leadId + "ConvertButton").innerHTML = "";
					//clean up Account fields on Individual account, they get written to in the conversion process
					if (ThisAccount.get("Name")=="Individual") {
						var Account = new Sforce.Dynabean('Account');
						var AccountArray = new Array(1);
						//Here is where you can add other fields to set on the new Account
						Account.set("Id",ThisConversionResponse.accountId);
						//null out the key fields	
						Account.fieldsToNull.push("BillingStreet");
						Account.fieldsToNull.push("BillingCity");	
						Account.fieldsToNull.push("BillingCountry");	
						Account.fieldsToNull.push("BillingState");	
						Account.fieldsToNull.push("BillingPostalCode");	
						Account.fieldsToNull.push("Phone");
						Account.fieldsToNull.push("Fax");			
						AccountArray[0] = Account;	
						var AccountSaveResult = sforceClient.Update(AccountArray);
						if (AccountSaveResult[0].success == true) {
						} else {
							alert("error!");
						}
					}					
					
					//modify the opportunity if we created one
					if (OppCreationEnabled && CurrentLeadDonationAmount!="" && CurrentLeadDonationAmount!=null) {
						//display a link to the opp
						document.getElementById("Row" + LeadToConvert.leadId + "oppdate").innerHTML = oppdatelinkHTML;
						//display a link to the opp
						document.getElementById("Row" + LeadToConvert.leadId + "oppamount").innerHTML = oppamountlinkHTML;
						//Create a new Opportuniy object so we can update the Opportunity we just created
						var oppty = new Sforce.Dynabean("Opportunity");
						var opptyArray = new Array(1);
						//Get the Id for the new Opportunity
						oppty.set("Id",ThisConversionResponse.opportunityId);
						//Set the Recordtype
						//oppty.set("RecordTypeId",OpportunityRecordType);
						//Set the Type
						//oppty.set("Type",OpportunityType);
						//Set the fund
						//oppty.set("Fund__c",Fund);

						//if the opp date is null, use today
						if (CurrentLeadDonationCloseDate!=null) {
							var LeadDonationDate = CurrentLeadDonationCloseDate;
						} else {
							var LeadDonationDate = new Date();
						}

						//Set the close date to donation date
						oppty.set("CloseDate", LeadDonationDate);
						//Set the amount to donation amount.
						oppty.set("Amount", CurrentLeadDonationAmount);
						//There are three steps in closing an Opportunity
						//Set the Opportunity to closed
						oppty.set("IsClosed",1);
						//Set the Opportunity to won
						oppty.set("IsWon",1);
						//Set the Opportunity stage to closed won
						oppty.set("StageName","Closed Won");
						//drop the object into an array
						opptyArray[0] = oppty;			
						//Call Update on the Opportunity.
						var OpportunitySaveResult = sforceClient.Update(opptyArray);
						
						if (OpportunitySaveResult[0].success == true) {      
							//this section modifies the automatically created OpportunityContactRole for the new Opportunity and Contact to have a Role define above and the Is Primary checkmark        
							//Query for the OpportunityContactRole record of the newly converted lead and contact
							var OpportunityContactRole = sforceClient.Query("Select Id from OpportunityContactRole where OpportunityId='"+ ThisConversionResponse.opportunityId +"' and ContactId='" + ThisConversionResponse.contactId + "'");		
							if (OpportunityContactRole.size!=0) {
								OpportunityContactRoleArray = OpportunityContactRole.records;
								ThisOpportunityContactRole = OpportunityContactRoleArray[0];
								//call the ModifyContactRole function				
								var OpportunityContactRoleSaveResult = ModifyContactRole(ThisOpportunityContactRole.get("id"),OpportunityContactRoleName);								
								//error handling                                
								if (OpportunityContactRoleSaveResult[0].success == true) {
								} else {
									alert("SoapFault in updating contact roles: " + OpportunityContactRoleSaveResult.faultstring);
								}					
							} else {
								alert("Error in finding new opportunity: " + OpportunityContactRole.message);
							}
						} else {
							alert("SoapFault in updating Oppty: " + OpportunitySaveResult.faultstring);
						}
					}	
					
					//if you have set up the ONE/Northwest custom object for householding and we're not merging to an existing contact, create a household
					if (check_field("Contact", "ONEN_Household__c") && ContactId=="") {

						var ThisContact = sforceClient.Retrieve("FirstName, LastName, MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry","Contact",ThisConversionResponse.contactId)[0];
						var Household = new Sforce.Dynabean('ONEN_Household__c');
						var HouseholdArray = new Array(1);
						Household.set("Name",ThisContact.get("FirstName") + " " + ThisContact.get("LastName") + " Household");	
						Household.set("MailingStreet__c",ThisContact.get("MailingStreet"));
						Household.set("MailingCity__c",ThisContact.get("MailingCity"));
						Household.set("MailingState__c",ThisContact.get("MailingState"));
						Household.set("MailingPostalCode__c",ThisContact.get("MailingPostalCode"));
						Household.set("MailingCountry__c",ThisContact.get("MailingCountry"));
						Household.set("Recognition_Name__c",ThisContact.get("FirstName") + " " + ThisContact.get("LastName"));
						Household.set("Recognition_Name_Short__c",ThisContact.get("FirstName"));
						
						HouseholdArray[0] = Household;			
						//Call create on the Household.
						var HouseholdSaveResult = sforceClient.Create(HouseholdArray);

						if (HouseholdSaveResult[0].success == true) {
							//get the object that was returned
							CreatedHousehold = HouseholdSaveResult[0];
							//update the Contact so it's related to the new Household
							var Contact = new Sforce.Dynabean('Contact');
							var ContactArray = new Array(1);
							//Set the Recordtype
							Contact.set("Id",ThisConversionResponse.contactId);									
							//relate the two
							Contact.set("ONEN_Household__c", CreatedHousehold.id);
							ContactArray[0] = Contact;			
							//Update the Contact.
							var ContactSaveResult = sforceClient.Update(ContactArray);
			
							if (ContactSaveResult[0].success == true) {								
							} else {
								alert("Error updating Contact! " + ContactSaveResult[0].message);
							}		
						} else {
							alert("Error in creating household!");
						}
					}
										
							
				} else {
					alert("SoapFault in lead conversion: " + LeadConversionResponse[0].errors[0].message);
				}			
				
				
				
			}
			/****************************************************************
			* function to create Opportunity Contact Roles for a known Opp, Contact, and Role Name
			*****************************************************************/
			function ModifyContactRole(ContactRoleId,OpportunityContactRoleName){
				//create the object for opportunity contact role
				var ContactRole = new Sforce.Dynabean('OpportunityContactRole');
				ContactRole.set("Id",ContactRoleId);
				//set the contact role to the default
				ContactRole.set("Role",OpportunityContactRoleName);
				//Make it primary
				ContactRole.set("IsPrimary",1);
				//create an array to pass it to Update
				var contactRoleArray = new Array(1);
				contactRoleArray[0] = ContactRole;
				//Update it
				return sforceClient.Update(contactRoleArray);
			}
			/****************************************************************
			* function to deal with ' that would blow up the page
			*****************************************************************/
			function encode(string) {
				string = string.replace("\'","`");			
				return string;
			}
			/****************************************************************
			* function to put the ' back in the strings when displaying or storing in the database
			*****************************************************************/
			function decode(string) {
				string = string.replace("`","\'");
				return string;
			}
			/****************************************************************
			* function to look for a field on a given object. Thanks to Ron Hess of sf.com!
			*****************************************************************/
			function check_field(table, name) { // checks for custom field exists
                name = name.toLowerCase();
                if( ! /__c/.test(name) ) {
                    name += '__c';
                }
                var def = sforceClient.DescribeSObject(table); 
                var ret =  def.fieldMap.containsItem(name);
                return ( ret );
            }
			
		</script>
	</head>
	<body onLoad="initPage();" class="lead  overviewPage">
		<div id="divLeadListHTML"></div>
	</body>

</html>