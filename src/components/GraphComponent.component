<apex:component controller="GraphComponentController">
    <apex:includeScript value="{!$Resource.googleCharts}"/>
    <apex:includeScript value="{!$Resource.graphComponentJs}"/>
    <apex:styleSheet value="{!$Resource.graphComponentCss}"/>

    <apex:attribute name="sectionKey"
        type="String"
        assignTo="{!sectionKey}"
        required="true"
        description="The key given to the section component so it can be easily identified what is in a section"
    />
    <apex:attribute name="key"
        type="String"
        assignTo="{!key}"
        required="true"
        description="The key given to this component so the parent can easily get access to it"
    />
    <apex:attribute name="pageController"
        type="ParentComponentBase"
        assignTo="{!parentComponentController}"
        required="true"
        description="The controller for the parent controller"
    />
    <apex:attribute name="graph"
        type="sObject"
        description="The Graph Parameter object that drives this graph"
        required="true"
        assignTo="{!sObjectRecord}"
    />
    <apex:attribute name="showEnlarge"
        type="Boolean"
        description="A true value will hide the button that allows the graph to be expanded into a new window"
        default="true"
    />
    <apex:attribute name="expanded"
        type="Boolean"
        assignTo="{!expanded}"
        description="A true value will hide the button that allows the graph to be expanded into a new window"
        default="false"
    />

    <script type="text/javascript">
        var FAIL ='';
        if ("{!json}" != "FAIL") {
            addGraphParameter("{!key}", new graphDetails(
                '{!key}',
                {!json},
                '{!typeOfGraph}',
                '{!xAxisTitle}',
                '{!xAxisColor}',
                '{!yAxisTitle}',
                '{!yAxisColor}',
                '{!title}',
                '{!titleColor}',
                '{!legendColor}',
                '{!showDataInline}',
                '{!height}',
                '{!width}',
                {!expanded}
            ));
        }

        // Add graph to the section refresh when the data is all regenerated
        addSectionRefreshStore("{!sectionKey}", "{!key}");
    </script>
    <apex:actionFunction action="{!refreshData}" name="{!key}" rerender="graph"/>
    <apex:outputPanel id="graph">
        <script type="text/javascript">
            if ({!isRefresh}) {
                var graph = getGraph("{!key}");
                if (graph != undefined) {
                    graph.json = {!json};
                    graph.rebuildDataTable();
                    graph.drawGraph();
                }
                closeGenericModal();
            }
        </script>
        <div class="graphMainContainer">
            <div style="display:inline-block">
                <div id="{!key}" class="graphContainer">
                </div>
                <div style="display:inline">
                    <div id="{!key}_dataTable" class="graphInlineDataTable" style="visibility:{!IF(showDataInline,'visible','hidden')}">
                    </div>
                    <div class="graphButton">
                        <apex:outputPanel id="refreshButton" styleClass="submitButtonGeneralWrapper">
                            <button id="graphRefresh" type="button" class="submitButton" onclick="refreshComponent('{!key}')">Refresh Graph</button>
                            <button id="enlarge" type="button" class="submitButton" style="visibility:{!IF(showEnlarge,'visible','hidden')}" onclick="openGraphInNewWindow('{!$Page.ExpandedDashboardVisual}', '{!key}')">Enlarge Graph</button>
                        </apex:outputPanel>
                    </div>
                </div>
                <a id="{!key}_Anchor"></a>
            </div>
        </div>
    </apex:outputPanel>
</apex:component>