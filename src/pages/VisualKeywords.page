<apex:page controller="VisualKeywordsController">
    <apex:includeScript value="{!$Resource.d3}" />
            <style type="text/css">
                .node {
                  cursor: pointer;
                }

                .node circle {
                  fill: #fff;
                  stroke: steelblue;
                  stroke-width: 1.5px;
                }

                .node text {
                  font: 10px sans-serif;
                }

                .link {
                  fill: none;
                  stroke: #ccc;
                  stroke-width: 1.5px;
                }               
        </style>

    <apex:form >
        <apex:pageMessages id="feedback"/>
        <apex:pageBlock id="parent_container" title="Keywords Tree">

            <table>
                <tr>
                    <td>
                        Menu
                       <apex:selectList id="topMenuList" value="{!selectedTopMenu}" multiselect="false" size="1">
                            <apex:selectOptions value="{!topMenus}"/>
                       </apex:selectList>    
                       <input type="button" onclick="visualizeData();" value="Load"/>                                        
                    </td>
                </tr>
                <tr>
                    <td id="svg_container">
                        <script type="text/javascript">

                            /**
                             * to be called by a button in the UI kicking
                             * off the process
                             * @return NOTHING
                             */
                            function visualizeData(){       
                                                       
                                var margin = {top: 20, right: 120, bottom: 20, left: 120};
                                var width = 960 - margin.right - margin.left;
                                var height = 800 - margin.top - margin.bottom;
                            
                                var i = 0;
                                var duration = 750;
                                var root;
                                var tree = d3.layout.tree().size([height, width]);
                                                                        
                                var diagonal = d3.svg.diagonal().projection(function(d) { return [d.y, d.x]; });
                                d3.select("svg").remove();
                                var svg = d3.select("#svg_container")
                                    .append("svg")
                                        .attr("width", width + margin.right + margin.left)
                                        .attr("height", height + margin.top + margin.bottom)
                                    .append("g")
                                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");                            
                                
                                var e = document.getElementById("{!$Component.parent_container.topMenuList}");                                                                
                                //use visualforce remoting to call a method in the controller and fetch a tree structure
                                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.VisualKeywordsController.getKeywords}',
                                    e.options[e.selectedIndex].value, e.options[e.selectedIndex].text, 
                                    function(result, event){
                                        if (event.status) {
                                            processResult(result);
                                        } else if (event.type === 'exception') {
                                            console.log(event.where);
                                            alert(event.message);                                            
                                        }
                                    }, {buffer: false}, {escape: false}, {timeout: 30000});
                                
                                /**
                                 * method to be called one-complete of the visualf-remoting call
                                 * @param   JSON jsonResult   tree structure in json
                                 * @return NOTHING
                                 */
                                function processResult(jsonResult) {
                                    console.log("now value is =" + jsonResult);
                                    root = jsonResult[0];
                                    root.x0 = height / 2;
                                    root.y0 = 0;
                                
                                    /**
                                     * loop throug all nodes in the children array collapsing them
                                     * @param  MenuItem node d
                                     * @return NOTHING
                                     */
                                    function collapse(d) {
                                        if (d.children) {
                                            d._children = d.children;
                                            d._children.forEach(collapse);
                                            d.children = null;
                                        }
                                    }

                                    root.children.forEach(collapse);
                                    update(root);
                                
                                    d3.select(self.frameElement).style("height", "800px");
                                
                                    /**
                                     * given the root node, plots each node recursively
                                     * @param  MenuItem node source
                                     * @return NOTHING
                                     */
                                    function update(source){    
                                        // Compute the new tree layout.
                                        var nodes = tree.nodes(root).reverse(), links = tree.links(nodes);
                                
                                        // Normalize for fixed-depth.
                                        nodes.forEach(function(d) { d.y = d.depth * 180; });
                                
                                        // Update the nodes…
                                        var node = svg.selectAll("g.node").data(nodes, function(d) { return d.id || (d.id = ++i); });
                                
                                        // Enter any new nodes at the parent's previous position.
                                        var nodeEnter = node.enter().append("g")
                                            .attr("class", "node")
                                            .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
                                            .on("click", click);
                                
                                        nodeEnter.append("circle")
                                            .attr("r", 1e-6)
                                            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
                                
                                        nodeEnter.append("text")
                                            .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
                                            .attr("dy", ".35em")
                                            .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
                                            .text(function(d) { return d.name; })
                                            .style("fill-opacity", 1e-6);
                                
                                        // Transition nodes to their new position.
                                        var nodeUpdate = node.transition()
                                            .duration(duration)
                                            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
                                
                                        nodeUpdate.select("circle")
                                            .attr("r", 4.5)
                                            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });
                                
                                        nodeUpdate.select("text")
                                            .style("fill-opacity", 1);
                                
                                        // Transition exiting nodes to the parent's new position.
                                        var nodeExit = node.exit().transition()
                                            .duration(duration)
                                            .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
                                            .remove();
                                
                                        nodeExit.select("circle")
                                            .attr("r", 1e-6);
                                
                                        nodeExit.select("text")
                                            .style("fill-opacity", 1e-6);
                                
                                        // Update the links…
                                        var link = svg.selectAll("path.link")
                                            .data(links, function(d) { return d.target.id; });
                                
                                        // Enter any new links at the parent's previous position.
                                        link.enter().insert("path", "g")
                                            .attr("class", "link")
                                            .attr("d", function(d) {
                                                var o = {x: source.x0, y: source.y0};
                                                return diagonal({source: o, target: o});
                                            });
                                
                                        // Transition links to their new position.
                                        link.transition()
                                            .duration(duration)
                                            .attr("d", diagonal);
                                
                                        // Transition exiting nodes to the parent's new position.
                                        link.exit().transition()
                                            .duration(duration)
                                            .attr("d", function(d) {
                                                var o = {x: source.x, y: source.y};
                                                return diagonal({source: o, target: o});
                                            })
                                            .remove();
                                
                                        // Stash the old positions for transition.
                                        nodes.forEach(function(d) {
                                            d.x0 = d.x;
                                            d.y0 = d.y;
                                        });
                                    }
                                
                                    // Toggle children on click.
                                    function click(d) {
                                        if (d.children) {
                                            d._children = d.children;
                                            d.children = null;
                                        } else {
                                            d.children = d._children;
                                            d._children = null;
                                        }
                                        update(d);
                                    } 
                                }                             
                            }
                        </script>
                    </td>
                </tr>
            </table>

        </apex:pageBlock>
    </apex:form>

</apex:page>